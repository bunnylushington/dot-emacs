
* Thoughts to consider.

The pg module is installed but I've done nothing to use it. It'd be
nice to figure out some eqlite -> pg tricks to test statements.

rt-liberation would be nice if there were an easy way to keep the
password updated.  This leads into...

A 1password client would be nice!

The rings package has some potential.
https://github.com/konr/rings

ido-grid-mode?

M-x git-link

exsqlaim-mode?
https://github.com/ahmadnazir/exsqlaim-mode

bts for integration with gitlab?


* Warnings
#+begin_src emacs-lisp
  (setq warning-minimum-level :error)
#+end_src

* Convenience
#+begin_src emacs-lisp
  (defun ii/emacs-dir-file (file)
    (expand-file-name file user-emacs-directory))

  (defun ii/home-dir-file (file)
    (expand-file-name file (getenv "HOME")))
#+end_src

* Packages
#+begin_src emacs-lisp
  (require 'package)
  (package-initialize)

  (setq package-archives
        '(("gnu" . "https://elpa.gnu.org/packages/")
          ("MELPA" . "https://melpa.org/packages/"))
        package-archive-priorities
        '(("MELPA" . 5)
          ("gnu" . 0)))

  (let* ((packge--builtins nil)
         (packages
          '(ace-window
            alchemist
            amx
            apache-mode
            auto-complete-c-headers
            boxquote
            buffer-flip
            buffer-move
            bufler
            calfw
            calfw-ical
            calfw-org
            colormaps
            column-enforce-mode
            com-css-sort
            command-log-mode
            csv
            csv-mode
            dash-at-point
            diff-hl
            dired-imenu
            dired-rainbow
            distel-completion-lib
            docean
            docker
            docker-api
            docker-cli
            docker-compose-mode
            dockerfile-mode
            dumb-jump
            edbi
            edbi-minor-mode
            edts
            eglot
            eglot-java
            elfeed
            elfeed-goodies
            elfeed-org
            elfeed-protocol
            elfeed-score
            elfeed-web
            elm-mode
            emamux
            erlang
            filladapt
            flycheck
            fontawesome
            ggtags
            gh
            gh-md
            git-timemachine
            gitlab
            go-mode
            grip-mode
            haskell-mode
            helm-lsp
            hide-lines
            hiwin
            hyperbole
            ido-completing-read+
            ido-hacks
            imenu-list
            impatient-mode
            jinja2-mode
            jsonrpc
            keycast
            lsp-docker
            lsp-ivy
            lsp-mode
            lsp-origami
            lsp-treemacs
            lsp-ui
            lua-mode
            magit
            magit-todos
            markdown-mode
            markdown-mode+
            markdown-preview-mode
            md4rd
            messages-are-flowing
            mmm-mode
            mu4e-views
            multi-vterm
            nov
            open-junk-file
            org-journal
            org-modern
            outline-magic
            persp-projectile
            perspective
            pg
            php-mode
            projectile
            python
            python-mode
            quick-buffer-switch
            restclient
            restclient-test
            salt-mode
            scss-mode
            slack
            smartparens
            svg-tag-mode
            term-projectile
            tramp
            treemacs-projectile
            undo-tree
            vterm
            vterm-toggle
            which-key
            window-number
            wttrin
            yaml
            yasnippet
            yasnippet-snippets
            ztree)))
    (when (memq window-system '(mac ns))
      (push 'exec-path-from-shell packages)
      (push 'reveal-in-osx-finder packages))
    (let ((packages (seq-remove 'package-installed-p packages)))
      (print packages)
      (when packages
        (package-refresh-contents)
        (mapc 'package-install packages))))

#+end_src

* Paths
#+begin_src emacs-lisp
  (add-to-list 'exec-path "/usr/local/bin")
  (add-to-list 'exec-path "/opt/homebrew/bin")
  (add-to-list 'exec-path "/opt/homebrew/opt/mysql-client/bin")
  (setenv "PATH"
          (concat "/usr/local/bin:/opt/homebrew/bin:" (getenv "PATH")))

  (add-to-list 'load-path (ii/emacs-dir-file "nano-emacs"))
#+end_src

** Info Initialization
For some reason emacs-mac doesn't generate a dir file in
/opt/homebrew/Cellar/emacs-mac/emacs-28.1-mac-9.0/share/info/emacs

Fix this with
#+begin_src sh :tangle no
  for F in `echo *.info.gz`; do
      install-info $F dir
  done
#+end_src

It also appears this nonsense is required to actually READ that
list (even though we don't change the info path at all?).

#+begin_src emacs-lisp
  (require 'info)
  (info-initialize)
#+end_src

* Behavior
#+begin_src emacs-lisp
  (midnight-mode)
  (setq gc-cons-threshold 20000000
        default-directory "~/")
  (add-to-list 'completion-ignored-extensions ".#")
  (setq-default indent-tabs-mode nil
                confirm-kill-emacs 'yes-or-no-p
                tab-width 2)
  (global-goto-address-mode)
  (setq widget-image-enable nil)
  (global-set-key [remap dabbrev-expand] 'hippie-expand)
  (setq hippie-expand-try-functions-list
        '(try-expand-dabbrev
          try-expand-dabbrev-all-buffers
          try-complete-lisp-symbol
          try-complete-file-name-partially
          try-complete-file-name))

  (setq confirm-nonexistent-file-or-buffer nil
        ido-create-new-buffer 'always)
  (add-hook 'after-save-hook
            'executable-make-buffer-file-executable-if-script-p)
  (add-hook 'comint-output-filter-functions
            'comint-watch-for-password-prompt)
  (yas-global-mode)
#+end_src

Narrow to Region
#+begin_src emacs-lisp
  (put 'narrow-to-region 'disabled nil)
  (global-set-key [remap narrow-to-region] 'fancy-narrow-to-region)
  (global-set-key [remap widen] 'fancy-widen)
#+end_src

#+begin_src emacs-lisp
  (setq
   grep-find-command
   '("find . -type f -exec grep --color=auto -nH --null -e  \\{\\} +" . 54)

   grep-find-template
   "find -H <D> <X> -type f <F> -exec grep <C> -nH --null -e <R> \\{\\} +")

#+end_src

** Some Keybindings
Mac Modifiers

#+begin_src emacs-lisp
  (setq mac-option-modifier '(:function alt :mouse alt)
        mac-right-command-modifier 'super
        mac-right-option-modifier 'hyper
        ns-alternate-modifier 'super
        ns-command-modifier 'meta)
#+end_src

Some delete/backspace stuff.  I never mean to S-Delete anything, so we
remove that binding.  Further the HHKB sometimes finds itself in PC
mode where the meaning of the delete key is borked.  Always backspace
and never erase.
#+begin_src emacs-lisp
  (global-unset-key (kbd "<S-delete>"))
  (normal-erase-is-backspace-mode 0)
#+end_src

Eventually we need to quit emacs.
#+begin_src emacs-lisp
  (global-set-key (kbd "C-x C-z") 'save-buffers-kill-terminal)
#+end_src

Setup fill-column-indicator mode and provide an easy toggle.  Keep
lines short!
#+begin_src emacs-lisp
  (global-set-key (kbd "C-c w") 'display-fill-column-indicator-mode)
  (setq display-fill-column-indicator t
        global-display-fill-column-indicator-mode t
        display-fill-column-indicator-character 124
        display-fill-column-indicator-column 80)
#+end_src

Junk file utilities.
#+begin_src emacs-lisp
  (global-set-key (kbd "C-x j") 'open-junk-file)
  (global-set-key (kbd "C-x C-j") 'ii/open-current-junk-directory)
  (global-set-key (kbd "C-x M-j") 'ii/rgrep-junk-directory)

  (defun ii/open-current-junk-directory ()
    "Dired the most relevant junk directory."
    (interactive)
    (let* ((full-filename (format-time-string open-junk-file-format))
           (directory (file-name-directory full-filename)))
      (dired directory)))

  (defun ii/rgrep-junk-directory ()
    "Run rgrep over the entire junk directory."
    (interactive)
    (let ((pattern (read-string "Pattern: "))
          (directory "~/junk"))
      (rgrep pattern "*" directory)))
#+end_src

Convenience Keybindings
#+begin_src emacs-lisp
  (global-set-key (kbd "s-w") 'delete-frame)
  (global-set-key (kbd "C-+") 'text-scale-increase)
  (global-set-key (kbd "C--") 'text-scale-decrease)
  (global-set-key (kbd "s-l") 'list-matching-lines)
  (global-set-key (kbd "s-u") 'uuidgen)
  (define-key isearch-mode-map (kbd "C-o") 'isearch-occur)
  (global-set-key (kbd "s-d") 'osx-dictionary-search-input)
#+end_src
** Dired
#+begin_src emacs-lisp
  (setq dired-use-ls-dired nil
        dired-vc-rename-file t)
#+end_src
** ssh
This is a hack.  comint-run is the wrong command to use (we should be
using comint-exec or brethren) but damn if ssh-add doesn't like that.
The problem with comint-run is that it leaves us in the comint buffer.
#+begin_src emacs-lisp
  (setq ii/ssh-key "~/.ssh/montuori")
  (setq ii/ssh-key-add "/usr/bin/ssh-add")

  (defun ii/ssh-agent-setup ()
    "Add a key to the ssh-agent."
    (interactive)
    (let ((keypath (expand-file-name ii/ssh-key))
          (ssh-buf (generate-new-buffer "*ii/ssh-agent*")))
      (with-temp-buffer
        (start-process "ii/ssh-add" (current-buffer) ii/ssh-key-add "-l")
        (goto-char (point-min))
        (if (search-forward keypath nil t)
            (message "Agent Configured")
          (progn
            (set-buffer ssh-buf)
            (comint-run ii/ssh-key-add (cons keypath nil)))))))
#+end_src
** Lat/Long
#+begin_src emacs-lisp
  (setq calendar-latitude 29.9510
        calendar-longitude -90.0715)
#+end_src
** Ibuffer
#+begin_src emacs-lisp
  (setq ibuffer-default-sorting-mode 'major-mode)
  (global-set-key [remap list-buffers] 'ibuffer)
#+end_src

* Custom Functions

Some frame size management hooks.  Generally, fit-frame-to-buffer for
certain special modes (ibuffer, dired, &c) but reset to 81 when the
window is quit.
#+begin_src emacs-lisp
  (defun ii/frame-width-hook (&rest args)
    "Set the frame width to match the Ibuffer list."
    (fit-frame-to-buffer nil nil 60 nil 81 'horizontally))

  (add-hook 'ibuffer-hook 'ii/frame-width-hook)
  (add-hook 'dired-after-readin-hook 'ii/frame-width-hook)
  (advice-add 'list-packages :after #'ii/frame-width-hook)


  (defun ii/quit-window-width-hook ()
    "Reset frame width to 81 on buffer quit."
    (set-frame-width (selected-frame) 81))

  (add-hook 'quit-window-hook 'ii/quit-window-width-hook)

#+end_src

A little frame picker (why isn't this in Emacs?)

#+begin_src emacs-lisp
  (defun ii/select-frame ()
    (interactive)
    (let* ((all-frames (mapcar
                        (lambda (f) (cons (frame-parameter f 'name)  f))
                        (frame-list-z-order)))
           (new-frame (completing-read
                       "Frame: "
                       (mapcar (lambda (f) (car f)) all-frames)))
           (target (cdr (assoc new-frame all-frames))))
      (select-frame-set-input-focus target)))

  (global-set-key (kbd "C-c C-f") 'ii/select-frame)

#+end_src


#+begin_src emacs-lisp
  (defun ii/switch-to-other-buffer ()
    "Switch to last buffer."
    (interactive)
    (switch-to-buffer (other-buffer)))
  (global-set-key "\M-\C-l" 'ii/switch-to-other-buffer)

#+end_src

#+begin_src emacs-lisp
  (require 'url-util)
  (defun ii/web-search ()
    "Search DuckDuckGo from Emacs."
    (interactive)
    (let* ((term (read-string "Search term: "))
           (url (format "\"https://ddg.gg?q=%s\"" (url-hexify-string term)))
           (cmd (concat "open " url)))
      (start-process-shell-command "" nil cmd)))
  (global-set-key (kbd "C-c C-s") 'ii/web-search)
#+end_src

#+begin_src emacs-lisp
  (require 'mm-url)
  (defun ii/tinyurl ()
    "Create a tiny URL."
    (interactive)
    (let* ((long-url (thing-at-point 'url))
           (tinyurl
            (save-excursion
              (with-temp-buffer
                (mm-url-insert
                 (concat "http://tinyurl.com/api-create.php?url=" long-url))
                (kill-ring-save (point-min) (point-max))
                (buffer-string)))))
      (message tinyurl)))
#+end_src

#+begin_src emacs-lisp
  (defun ii/what-face (pos)
    (interactive "d")
    (let ((face (or (get-char-property (point) 'read-face-name)
                    (get-char-property (point) 'face))))
      (if face (message "Face: %s" face) (message "No face at %d" pos))))
#+end_src

#+begin_src emacs-lisp
  (defun ii/hex-region (start end)
    "urlencode the region between START and END in current buffer."
    (interactive "r")
    (func-region start end #'url-hexify-string))

  (defun ii/unhex-region (start end)
    "de-urlencode the region between START and END in current buffer."
    (interactive "r")
    (func-region start end #'url-unhex-string))
#+end_src
* Libraries

** Projectile
#+begin_src emacs-lisp
  (require 'projectile)
  (define-key projectile-mode-map (kbd "s-p") 'projectile-command-map)
  (projectile-mode +1)
  (setq projectile-project-search-path '(("~/projects/" . 2))
        projectile-indexing-method 'hybrid)
#+end_src

** Elfeeds
#+begin_src emacs-lisp
  (setq elfeed-feeds
        '(
          ("https://www.reddit.com/r/qlab.rss" qlab)
          ("https://www.reddit.com/r/techtheater.rss" techtheater)
          ("https://www.reddit.com/r/throwers.rss" throwers)
          ("https://www.reddit.com/r/emacs.rss" emacs)))
  (setq-default elfeed-search-filter "@60-days-ago +unread")
  (setq elfeed-log-level 'info
        elfeed-goodies/entry-pane-position 'top)

#+end_src

** Elm
#+begin_src emacs-lisp
  (setq elm-indent-after-keywords
        '(("of" 2) ("in" 2 0) ("{" 2) "if" "then" "else" "let")
        elm-indent-offset 2
        elm-sort-imports-on-save t)
#+end_src

** Erlang
Sometimes when working on someone else's code (especially the Nitrogen
codebase) it's necessary to change the indentation level to something
that I'd consider absurd but we like to play nice.
#+begin_src emacs-lisp
  (defun ii/set-erlang-indent-level (spaces)
    "Change the Erlang indentation level."
    (interactive "nIndention Level: ")
    (set-variable 'erlang-indent-level spaces t))

  (setq erlang-check-module-name t
        erlang-indent-level 2)
#+end_src

nxo-mode provides some integration among Erlang, SQL (and eqlite), and
Projectile modes.
#+begin_src emacs-lisp
  (load-file (ii/emacs-dir-file "nxo.el"))
  (nxo-mode)
#+end_src

** Org
#+begin_src emacs-lisp
  (global-set-key (kbd "C-c l") 'org-store-link)
  (global-set-key (kbd "C-c a") 'org-agenda)
  (global-set-key (kbd "C-c c") 'org-capture)
  (global-set-key (kbd "<f2>")
                  '(lambda () (interactive) (find-file org-default-notes-file)))

  (load-library "org-journal")
  (require 'org-journal)

  (setq
   org-default-notes-file "~/CloudDocs/org-mode/notes.org"

   org-agenda-files (list "~/CloudDocs/org-mode")

   ;; Journal
   org-journal-dir "~/CloudDocs/journal/"
   org-journal-file-type 'weekly

   ;; Edit settings
   org-auto-align-tags nil
   org-tags-column 0
   org-catch-invisible-edits 'show-and-error
   org-special-ctrl-a/e t
   org-insert-heading-respect-content t

   ;; Org styling, hide markup etc.
   org-hide-emphasis-markers t
   org-pretty-entities t
   org-ellipsis "…")

  (global-org-modern-mode)
  (add-hook 'org-mode-hook 'org-indent-mode)
#+end_src

** Todos
I like the functionality of hl-todo-insert but not the way it formats
comments.  This is a little replacement function that styles things in
a way that works with my idea of delightful.

#+begin_src emacs-lisp
  (global-hl-todo-mode -1)
  (define-key hl-todo-mode-map (kbd "C-c o") #'hl-todo-occur)
  (define-key hl-todo-mode-map (kbd "C-c i") #'hl-todo-insert)

  (defun ii/hl-todo-insert (keyword)
    "Advice around hl-todo-insert"
    (interactive
     (list (completing-read
            "Insert keyword: "
            (cl-mapcan (pcase-lambda (`(,keyword . ,face))
                         (and (equal (regexp-quote keyword) keyword)
                              (list (propertize keyword 'face
                                                (hl-todo--combine-face face)))))
                       hl-todo-keyword-faces))))
    (move-end-of-line nil)
    (newline)
    (indent-for-tab-command)
    (insert (concat keyword ": "))
    (back-to-indentation)
    (set-mark-command nil)
    (move-end-of-line nil)
    (comment-dwim nil))

  (advice-add 'hl-todo-insert :override #'ii/hl-todo-insert)
#+end_src

** Magit
#+begin_src emacs-lisp
  (global-set-key (kbd "s-g") 'magit-status)
  (global-set-key (kbd "s-G") 'magit-dispatch)
  (setq magit-commit-show-diff nil)
  (magit-wip-mode 1)
  (add-hook 'before-save-hook 'magit-wip-commit-initial-backup)
#+end_src

** Smart Comment
A reminder that C-u M-; marks code for deletion.  C-u C-u M-; deletes
that code.
#+begin_src emacs-lisp
  (require 'smart-comment)
  (global-set-key [remap comment-dwim] 'smart-comment)
#+end_src

** Backup
#+begin_src emacs-lisp
  (setq vc-make-backup-files t)
  (defun ii/save-buffer-force-backup (arg)
    "Force a backupp on each save-buffer."
    (interactive "P")
    (if (consp arg) (save-buffer) (save-buffer 16)))
  (global-set-key [remap save-buffer] 'ii/save-buffer-force-backup)
#+end_src
** Docker
#+begin_src emacs-lisp
  (global-set-key (kbd "C-c C-d") 'docker)
  (setq docker-tram-use-names t)
#+end_src

** Quick Buffer Switch

#+begin_src emacs-lisp
  (require 'quick-buffer-switch)
  (qbs-init)
  (qbs-add-predicates
   (make-qbs:predicate
    :name 'web
    :shortcut "C-w"
    :test '(when (eq major-mode 'web-mode) qbs:buffer-name))
   (make-qbs:predicate
    :name 'sql
    :shortcut "C-s"
    :test '(when (eq major-mode 'sql-mode) qbs:buffer-name))
   (make-qbs:predicate
    :name 'vterm
    :shortcut "C-v"
    :test '(when (eq major-mode 'vterm-mode) qbs:buffer-name)))
#+end_src

** VTerm
to (re-)compile:
#+begin_src sh :tangle no
  cd ~/.emacs.d/elpa/vterm-*
  mkdir -p build
  cd build
  cmake ..
  make
#+end_src

#+begin_src emacs-lisp
  (require 'vterm)
  (require 'multi-vterm)
  (require 'vterm-toggle)

  (add-to-list 'vterm-eval-cmds
               '("update-pwd" (lambda (path) (setq default-directory path))))

  (setq vterm-toggle-fullscreen-p nil)
  (setq vterm-toggle-hide-method nil)

  (xterm-mouse-mode 1)
  (require 's)
  (load "server")
  (unless (server-running-p) (server-start))
  (setq disabled-command-hook nil
        vterm-clear-scrollback-when-clearing t
        vterm-environment '("'(\"emacs-vterm=true\")")
        vterm-max-scrollback 10000)
#+end_src

And some handy key bindings.
#+begin_src emacs-lisp
  (global-set-key (kbd "s-f") 'multi-vterm-dedicated-toggle)
  (global-set-key (kbd "s-v") 'multi-vterm-project)
  (global-set-key (kbd "s-n") 'multi-vterm)
  (global-set-key (kbd "s-.") 'qbs-vterm)
  (define-key vterm-mode-map (kbd "s-'") 'multi-vterm-next)
  (define-key vterm-mode-map (kbd "s-;") 'multi-vterm-prev)
  (define-key vterm-mode-map (kbd "s-c") 'vterm-copy-mode)
  (define-key vterm-mode-map (kbd "s-r") 'multi-vterm-rename-buffer)
  (define-key vterm-mode-map (kbd "M-C-l") 'ii/switch-to-other-buffer)
  (define-key vterm-copy-mode-map (kbd "s-c") 'vterm-copy-mode)
  (define-key vterm-copy-mode-map (kbd "M-C-l") 'ii/switch-to-other-buffer)
#+end_src

** Parenthesis
#+begin_src emacs-lisp
  (show-paren-mode t)
  (setq show-paren-style 'expression
        show-paren-priority 9999)
#+end_src

** Mac Tabs
#+begin_src emacs-lisp
  (global-set-key (kbd "<f7>") 'mac-previous-tab)
  (global-set-key (kbd "<f9>") 'mac-next-tab)
  (global-set-key (kbd "<f8>") 'mac-toggle-tab-group-overview)
  (global-set-key (kbd "<f6>") 'mac-move-tab-to-new-frame)
  (global-set-key (kbd "s-<f6>") 'mac-merge-all-frame-tabs)

  (define-key vterm-mode-map (kbd "<f7>") 'mac-previous-tab)
  (define-key vterm-mode-map (kbd "<f9>") 'mac-next-tab)
  (define-key vterm-mode-map (kbd "<f8>") 'mac-toggle-tab-group-overview)
  (define-key vterm-mode-map (kbd "<f6>") 'mac-move-tab-to-new-frame)

  (define-key vterm-copy-mode-map (kbd "<f7>") 'mac-previous-tab)
  (define-key vterm-copy-mode-map (kbd "<f9>") 'mac-next-tab)
  (define-key vterm-copy-mode-map (kbd "<f8>") 'mac-toggle-tab-group-overview)
  (define-key vterm-copy-mode-map (kbd "<f6>") 'mac-move-tab-to-new-frame)
#+end_src

** IDO
#+begin_src emacs-lisp
  (load-library "ido-hacks")
  (require 'ido)
  (require 'ido-completing-read+)
  (require 'amx)

  (setq ido-enable-flex-matching t)
  (ido-mode 1)
  (ido-ubiquitous-mode 1)
  (amx-mode 1)

  (setq ido-default-buffer-method 'selected-window)

  (require 'flx-ido)
  (flx-ido-mode 1)
  (setq ido-enable-flex-matching t)
  (setq ido-use-faces nil)
  (ido-vertical-mode 1)
  (setq ido-vertical-define-keys 'C-n-C-p-up-and-down)

#+end_src

** Imenu
#+begin_src emacs-lisp
  (setq imenu-list-auto-resize t
        imenu-list-position 'right)
  (global-set-key (kbd "s-i") 'side-hustle-toggle)
  (setq side-hustle-persistent-window nil
        side-hustle-evaporate-window t)

  (defun ii/side-hustle-toggle ()
    "Split the window, sure, but also increase the frame size.
  Note that the quit-window hook will resize the frame when the
  side-hustle window is closed."
    (let* ((width (alist-get 'window-width side-hustle-display-alist))
           (this-frame-width (frame-width))
           (new-frame-width (+ width this-frame-width)))
      (set-frame-width (selected-frame) new-frame-width)))

  (advice-add 'side-hustle-toggle :before  #'ii/side-hustle-toggle)
#+end_src

** Whitespace
#+begin_src emacs-lisp
  (require 'whitespace)
  (setq whitespace-style '(trailing tabs))
  (global-whitespace-mode t)
  (add-hook 'before-save-hook 'delete-trailing-whitespace)
#+end_src

** Perl
#+begin_src emacs-lisp
  (defalias 'perl-mode 'cperl-mode)
  (setq cperl-invalid-face nil)
  (add-to-list 'auto-mode-alist '("\\.t$"  . cperl-mode))
  (add-to-list 'auto-mode-alist '("\\.p[lm]" . cperl-mode))
#+end_src

** Outline
#+begin_src emacs-lisp
  (eval-after-load 'outline
    '(progn
       (require 'outline-magic)
       (define-key outline-minor-mode-map (kbd "<C-tab>") 'outline-cycle)))
#+end_src

** Web
#+begin_src emacs-lisp
  (require 'web-mode)
  (add-to-list 'auto-mode-alist '("\\.tpl\\.php\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.erb\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.mustache\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.dtl\\'" . web-mode))
  (setq web-mode-engines-alist
        '(("django" . "\\.dtl\\'")))
  (setq web-mode-code-indent-offset 2
        web-mode-css-indent-offset 2
        web-mode-enable-auto-quoting nil
        web-mode-markup-indent-offset 2
        web-mode-sql-indent-offset 2)

  (add-to-list 'hl-todo-exclude-modes 'web-mode)
#+end_src

** LSP
Some early LSP stuff to get going with.  Note the rather complicated
nano-modeline/lsp-headline integration below (under Appearance).

#+begin_src emacs-lisp
  (require 'lsp-mode)
  (setq lsp-go-use-placeholders t
        lsp-modeline-code-actions-enable nil
        lsp-headerline-breadcrumb-icons-enable nil
        lsp-ui-sideline-show-hover nil
        lsp-ui-sideline-show-diagnostics t
        lsp-headerline-breadcrumb-enable nil)

#+end_src

** Go
These go packages are required:
#+begin_src bash :tangle no
  go get -u github.com/lukehoban/go-outline
  go install golang.org/x/tools/gopls@latest
  go install github.com/go-delve/delve/cmd/dlv@latest
#+end_src

#+begin_src emacs-lisp
  (add-to-list 'exec-path "~/go/bin")
  (add-hook 'go-mode-hook #'lsp-deferred)

  (defun lsp-go-install-save-hooks ()
    (add-hook 'before-save-hook #'lsp-format-buffer t t)
    (add-hook 'before-save-hook #'lsp-organize-imports t t))
  (add-hook 'go-mode-hook #'lsp-go-install-save-hooks)

  (add-hook 'go-mode-hook 'go-imenu-setup)
#+end_src

** LSP

#+begin_src emacs-lisp
  (require 'lsp-headerline)
#+end_src

** SQL/eqlite
#+begin_src emacs-lisp
  (require 'sql)
  (setq sql-product 'postgres
        sql-mysql-options '("--protocol=tcp"))
  (add-to-list 'auto-mode-alist '("\\.eqlite\\'" .
                                  (lambda ()
                                    (sql-mode)
                                    (outline-minor-mode)
                                    (setq outline-regexp "-- :"))))
#+end_src

** Markdown
#+begin_src emacs-lisp
  (require 'markdown-mode)
  (add-to-list 'auto-mode-alist '("\\.text\\'" . markdown-mode))
  (add-to-list 'auto-mode-alist '("\\.markdown\\'" . markdown-mode))
  (add-to-list 'auto-mode-alist '("\\.md\\'" . gfm-mode))
  (define-key markdown-mode-command-map (kbd "g") #'grip-mode)
  (setq markdown-command "/opt/homebrew/bin/pandoc"
        markdown-link-make-text-function nil)
#+end_src

** Alert
#+begin_src emacs-lisp
  (use-package alert
    :commands (alert)
    :init
    (setq alert-default-style 'osx-notifier))
#+end_src

** epub/nov
# FIXME: Test that this actually works as it's supposed to.
#+begin_src emacs-lisp
  (require 'nov)
  (add-to-list 'auto-mode-alist '("\\.epub\\'" . nov-mode))
#+end_src
** calfw
#+begin_src emacs-lisp
  (require 'calfw)
  (require 'calfw-ical)
  (require 'calfw-org)

  (defvar ii/fastmail-personal-calendar
    "https://user.fm/calendar/.../Personal.ics")

  (defun ii/open-calendar ()
    (interactive)
    (cfw:open-calendar-buffer
     :contents-sources
     (list
      ;;    (cfw:org-create-source "Orange")
      (cfw:ical-create-source "Personal" ii/fastmail-personal-calendar "Gray")
      )))

  (global-set-key (kbd "s-c") 'ii/open-calendar)
#+end_src

* Mail/mu4e
See https://tinyurl.com/yxs3z6dq

# brew install isync
<create ~/.mbsyncrc>
# brew install mu
# mu init --my-address=bunny@bapi.us --my-address=montuori@bapi.us
# mu index

#+begin_src emacs-lisp
  (setq mu4e-config-file (ii/emacs-dir-file "ii-mu4e.el")
        configure-mu4e-p (if (file-readable-p mu4e-config-file) 't nil))
    (if configure-mu4e-p (load-file mu4e-config-file))
#+end_src
* Appearance
An easy way to toggle between the standard frame width (80 characters)
and a larger size that (tries to) accommodate whatever widths are present.
#+begin_src emacs-lisp
  (defun ii/fit-frame ()
    "Toggle between 80 character width and fit-frame width."
    (interactive)
    (if (> (frame-width (selected-frame)) 81)
        (set-frame-width (selected-frame) 81)
      (fit-frame-to-buffer nil nil 60 nil 81 'horizontally)))
  (global-set-key "\C-xw" 'ii/fit-frame)
#+end_src

Nano theme setup.  Note that we kind of dig into the Nano theme files
here to adjust as required.

Nano really wants to define this MISSING face...?
#+begin_src emacs-lisp
  (if configure-mu4e-p
      (defface mu4e-moved-face '((t  :inherit default-face))
        "Fixing missing NANO theme assignment"))
#+end_src

#+begin_src emacs-lisp
  (setq nano-font-family-monospaced "Monaco"
        nano-font-size 12)

  (require 'nano-layout)
  (require 'nano-theme-dark)
  (require 'nano-faces)
  (nano-faces)
  (require 'nano-theme)
  (nano-theme)
  (require 'nano-defaults)
  (require 'nano-session)
  (require 'nano-modeline)
  (if configure-mu4e-p (require 'nano-mu4e))
  (require 'nano-defaults)
#+end_src

Now some Nano related customizations.
#+begin_src emacs-lisp
  ;; Defaults
  (setq frame-title-format "%b"
        initial-major-mode 'emacs-lisp-mode
        font-lock-maximum-decoration t
        mac-use-title-bar t
        tab-width 2)

  ;; Layout
  (setcdr (assq 'internal-border-width default-frame-alist) 12)

  ;; Session
  (setq backup-directory-alist `((".*" . ,(ii/emacs-dir-file ".backups")))
        vc-make-backup-files t
        bookmark-default-file (ii/emacs-dir-file "bookmarks")
        backup-enable-predicate (lambda (name) t))

  ;; Face tweaks
  (set-face-attribute 'nano-face-critical nil
                      :foreground nano-color-subtle
                      :background nano-color-critical)
#+end_src

Nano Modeline should include Projectile project name
#+begin_src emacs-lisp
(load-file (ii/emacs-dir-file "custom-modeline.el"))
#+end_src


#+begin_src emacs-lisp
  (fringe-mode)
  (setq indicate-buffer-boundaries 'left
        indicate-empty-lines t
        x-underline-at-descent-line t
        global-linum-mode nil)
#+end_src
